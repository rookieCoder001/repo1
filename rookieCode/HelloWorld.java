//这是对第一行代码的注释
//public class后面的第三个单词必须跟文件名称保持一致，
//public class 后面定义的是一个类的名称，类是java所有源代码的基本组织单位
public class HelloWorld
//这是第二行代码的注释
//public static void main 是万年不变的main方法写法
//代表程序执行的起点
	{ public static void main (String[] args){
//这是第三行代码的注释
//System.out.println 代表打印输出语句（也就是屏幕打印输出）
//括号（）的双引号“”内输入什么，就显示出什么，写完一定要记得在括号外加分号结尾，表示程序执行终点。
	System.out.println("从前初识这世界，万般留恋！！！");
}
}
/* 

关键字：在java代码编写过程中，有些是具有特殊含义，被保留的，不能随意使用的文字成为关键字
关键字的特征：
    1.完全小写的字母单词 
    2.在增强版的记事本当中，可以显示特殊颜色，Ediplus不是，如notepad++

标识符也叫标志符，就是我们程序中，自定义的名称，包括类名，方法名，变量的名称等
标识符的硬性要求：
    1.标识符不能以数字开头，也不能含关键字
	2.可以包含26个英文字母，0-9的数字，以及＄（美元符号），――（下划线）
	一般而言（规范写法）：
	    1.类的名称：首字母大写，后面每个单词首字母大写，称为大驼峰式
		2.方法的名称：首字母小写，后面每个单词大写，成为小驼峰式
		3.变量的名称：同方法名

常量：在程序运行期间，固定不变的量。
常量的分类：
    1.字符串常量：凡是引用双引号""引起来的部分，叫字符串常量，如："abc","Hello"
	2.整数常量：直接写上的数字，没用小数点，如：100,102
	3.浮点数常量：直接写上的常量，有小数点，如：3.14
	4.字符常量：凡是单引号引起来的单个字符，就是字符常量，例如：'A','b','8','中'
	5.布尔常量:只有两种取值，true，false
	6.空常量：null，代表没用任何数据，不能直接用打印语句进行输出

数据类型：
    1.基本数据类型：
	    a.整数型 
		  字节型byte（1个字节，-128~127）
		  短整型short（2个字节，-32768~32767） 
		  整型int（4个字节，-2的31次方~2的31次方-1，系统默认型）  
		  长整型long （8个字节，-2的63次方~2的63次方-1，整数型最大范围）
		b.浮点型 
		  单精度浮点型float（4个字节，1.4013E-45-3~3.4028E+38）
		  双精度浮点型double（默认型，8个字节，4.9E-324~1.7977E+308）
		c.字符型 char （2个字节，0-65535）
		d.布尔型 boolean（1个字节，true，false）
	2.引用数据类型：
	    字符串，数组，类，接口，lambda

变量：程序运行期间，内容可以发生改变的量。
创建一个变量并且使用的格式。
数据类型 变量名称 =（赋值等号，右边值赋予左边），在创建一个变量的同时，立刻放入指定的数据值。

数据类型转换
当数据类型不一样时，将会发生数据类习惯转换

自动类型转换（隐式）
    1.代码不需要进行特殊处理，自动完成，
	2.数据范围赋值从小到大，右边小于左边。

强制类型转换（显示）
    1.特点：代码需要进行特殊的格式处理，不能自动完成，
	2.格式：范围小的类习惯，范围小的变量= （范围小的类型）原本范围大的数据；
注意事项：
    1.强制类型转换一般不推荐使用，因为有可能发生精度损失，数据溢出。
	2.byte/short/char这三种类型都可以发生数学运算，加减乘除等‘
    3.byte/short/char这三种类型在进行数学运算时，都会被先转换成int类型进行运算
数字与字符的对照关系表（编码表）：
ASCII码表：美国信息交换标准代码，在ASCII中'0'代表48，'A'代表65，'a'代表97；
Unicode码表：万国码，也是数字和符号的对照关系，开头0-127和ASCII一样，128开始包含更多字符

运算符：进行特定操作的符号，例如：+；
表达式：用运算符连起来的式子叫做表达式，例如：20+5，又例如：a+b;

四则运算：加减乘除，+，-，*，/，除法只会整除，不显示余数
取模运算：%，直接算余数；（只有对于整数的出发来说，取模运算符才有意义）

注意事项：
    1.一旦运算当中有不同类型的数据，那么结果将是数据范围大的那种。

四则运算符当中的“+”有常见的三种用法：
 1. 对于数值来说，那就是加法
 2.对于字符char类型来说，在计算之前，char会被提升成为Int,然后再计算，
 3.对于字符串String(首字母大写，并不是关键字)来说，加号代表字符串连接操作；
任何数据类型和字符串（String表示）进行连接操作，结果都会编程字符串

自增自减运算符：++，--，让一个变量加1或者减1
使用格式：写在变量名称之前或之后，例如：a++，--b
使用方式：
    1.单独使用，不和其他任何操作混合，自己独立成为一个步骤，
	2.混合使用，
使用区别：
    1.单独使用时，前++和后++无任何区别
    2.混合使用时，前++，变量立刻+1，然后拿结果运算，后++，首先用变量本来的数值，然后让变量+1；

赋值运算符：
    1.基本赋值运算符，“=”，代表将右侧的数据交给左侧的变量，
    2.复合赋值运算符，+=，-=，*=，/=，%=
	   a+=5 相当于a=a+5,后面赋值运算符同理
注意事项：
    1.只有变量才能使用赋值运算，变量不能进行赋值，
	2.符合赋值运算符其中隐含了一个强制类型转换；

比较运算符：==，>,<,>=,<=,!=(不等于),输出都是布尔数据，true或false

逻辑运算符：与，或，非，&&,||,!
短路：与"&&",或||具有短路效果，如果根据左边已经可以判断得到最终结果，那么右边的代码将不再执行，从而节省一定的性能
注意事项；
    1.逻辑运算符只能用于boolean值
    2.与，或左右各自有一个Boolean值，但是取反只要有唯一的一个Boolean值即可；
    3.与，或两种运算符，如果有多个条件，可以连续写

一元运算符：只需1个数据就可以进行操作的运算符，如！，++，--，
二元运算符：需要两个数据才可以进行的运算符，例如：+，-，=，
三元运算符：需要3个数据才可以进行操作的运算符

三元运算符格式： 
数据类型 变量名称 = 条件判断？ 表达式A：表达式B；
流程：
首先判断条件是否成立
如果成立为true，那么将表达式A的值赋值给左侧的变量，
如果不成立为false，那么将表达式B的值赋值给左侧的变量；
注意事项：
1.必须同时保证表达式A和表达式B都符合左侧数据类型的要求，
2.三元运算符的结果必须被使用。

方法：
定义一个方法的格式：
public static void 方法名称（）{
方法体
}
方法名称的命名和变量一样，使用小驼峰式，
方法体：也就是大括号当中可以包含任意条语句
注意事项：
1.方法定义的先后顺序无所谓；
2.方法的定义不能产生嵌套包含关系，即不能定义在其他方法里面
3.方法定义好之后，不会执行，如果想要执行，一定要进行方法的调用；
如何调用方法？格式：
方法名称（）；


*/
  